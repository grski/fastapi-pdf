[tool.poetry]
name = "pdf-stack-template"
version = "0.1.0"
description = ""
authors = ["theengineers <contact@theengineers.tech>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11.6"
fastapi = "^0.104.1"
psycopg2-binary = "^2.9.9"
pugsql = "^0.2.4"
sentry-sdk = {extras = ["fastapi"], version = "^1.34.0"}
gunicorn = "^21.2.0"
pydantic = "^2.4.2"
sendgrid = "^6.10.0"
aiohttp = "^3.8.6"
stripe = "^7.3.0"
pydantic-settings = "^2.0.3"
uvicorn = "^0.24.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.1.4"
pre-commit = "^3.5.0"
pytest = "^7.3.2"
pytest-mock = "^3.11.1"
pytest-cov = "^4.1.0"
httpx = "^0.24.1"
pytest-asyncio = "^0.21.0"



[tool.ruff]
target-version = 'py311'
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "ISC", # flake8-implicit-str-concat
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT", # flake8-2020
]

exclude = [
    "migrations",
    "__pycache__",
    "manage.py",
    "settings.py",
    "env",
    ".env",
    "venv",
    ".venv",
]

ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D401",
    "E402",
    "E501",
    "F401",
]
line-length = 120  # Must agree with Black

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.per-file-ignores]
"tests/*.py" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]

[tool.ruff.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]


[tool.ruff.isort]
section-order = ["fastapi", "future", "standard-library", "third-party",  "first-party", "local-folder"]

[tool.ruff.isort.sections]
fastapi = ["fastapi"]

[tool.poetry_bumpversion.file."apps/__init__.py"]

[tool.pytest.ini_options]
pythonpath = ["."]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

